---

# SOCIALIZEREMOTELY VARS
# ----------------------------------------------------------------------------------

# service vars
service_name: "socializeremotely"
service_user: "{{ service_name }}"
service_group: "{{ service_name }}"

# check in cloudformation for the device name
ebs_device: /dev/xvdf
ebs_mountpoint: /opt/hx

rootdir: "{{ ebs_mountpoint }}"
service_rootdir: "{{ rootdir }}/{{ service_name }}"
service_venv_dir: "{{ service_rootdir }}/venv"
# uncomment, otherwise default is debug: # 'DEBUG'|'INFO'|'WARNING'|'ERROR'|'CRITICAL'
# service_log_level: "DEBUG"

service_install_dir: "{{ service_rootdir }}/{{ service_name }}"
service_static_dir: "{{ service_rootdir }}/www"
service_django_static_dir: "{{ service_static_dir }}/static"
service_config_dir: "{{ service_rootdir }}/conf"
service_bin_dir: "{{ service_rootdir }}/bin"
service_data_dir: "{{ service_rootdir }}/data"

service_express_port: "{{ lookup('env', 'SOCIALIZEREMOTELY_EXPRESS_PORT') | default('8080', true) }}"
service_express_host: "{{ lookup('env', 'SOCIALIZEREMOTELY_EXPRESS_HOST') | default('127.0.0.1', true) }}"
express_timeout_seconds: 60  # workers timeout for nginx cfg

service_git_repo: "git@github.com:harvard-vpal/socialize-remotely-nuxt.git"
service_git_revision: "{{ lookup('env', 'SOCIALZEREMOTELY_GIT_REVISION') | default('master', true) }}"

# easier to create dirs with this dict
service_dirs_to_create:
    - "{{ service_rootdir }}"
    - "{{ service_config_dir }}"
    - "{{ service_data_dir }}"
    - "{{ service_bin_dir }}"
    - "{{ service_static_dir }}"
    - "{{ service_django_static_dir }}"

# express app config for playremote running in same box
proto: "{{ (ec2_tag_cluster != 'vagrant') | ternary('https', 'http') }}"
service_environment:
  API_PREFIX: "/api/"
  # beware that api_url port must match the one for playremote gunicorn
  API_URL: "http://localhost:8236/"
  BASE_URL: "{{ proto }}://{{ webserver_dns }}"
  DEV_EPPN: "test@{{ org_public_domain }}"
  PORT: "8080"
  SERVICE_URL: "{{ proto }}://{{ webserver_dns }}/login"
  SKIP_AUTH: "{{ (ec2_tag_cluster == 'vagrant') | ternary('true', 'false') }}"
  USE_SSL: "false"
  USE_SECURE_COOKIE: "{{ (ec2_tag_cluster == 'vagrant') | ternary('false', 'true') }}"
  HXJWT_PRIVATE: "{{ hxjwt_shared_secret }}"
  DEPLOY_ENV: "{{ (ec2_tag_cluster == 'prod') | ternary('production', 'devo') }}"
  AWS_BUCKET_NAME: "{{ lookup('env', 'SR_AWS_BUCKET_NAME') | default('s3bucket', true) }}"
  AWS_ACCESS_KEY_ID: "{{ lookup('env', 'SR_AWS_ACCESS_KEY_ID') | default('access_key_id', true) }}"
  AWS_SECRET_ACCESS_KEY: "{{ lookup('env', 'SR_AWS_SECRET_ACCESS_KEY') | default('secret_access_key', true) }}"

# service for error log monitoring (express app)
sentry_dsn: "{{ lookup('env', 'SENTRY_DSN') | default('', true) }}"

# for Stouts.users
users_enabled: yes
users_to_install:
    - 'nmaekawa'
    - 'lduarte'
    - '{{ service_user }}'

# for nmaekawa.apt
apt_required_packages_socializeremotely:
    - gcc
    - g++
    - make
    - build-essential


# PROXY VARS
# ----------------------------------------------------------------------------------

enable_ssl: '{{ ec2_tag_cluster != "vagrant" }}'
static_dir: '{{ service_static_dir }}'
nginx_ssl_dest_dir: '/etc/ssl/certs'
cert_dns: 'socializeremotely'  # this name must match pattern for ssl cert names
# special case for vagrant
vagrant_webserver_dns: '{{ inventory_hostname }}'




