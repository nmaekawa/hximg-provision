---
#
# assumes common_play.yml already applied to all involved inventory
#

- hosts: '{{ target_hosts | default("tag_service_loris", true) }}'
  remote_user: "{{ my_remote_user }}"
  become: yes
  become_user: root
  vars_files:
      - vars/common_vars.yml
      - vars/loris_vars.yml

  handlers:
    - include: handlers/main.yml

  tasks:
    - name: setup loris
      include_role:
          name: hx.loris


# install log/metrics scripts, syslog to s3, put-metrics to cloudwatch
# this playbook only applied if ec2_tag_cluster == "prod"
- import_playbook: cloudwatch_scripts_play.yml


# initial copy of source images to loris local filesys
# for fsresolver:
# - needs to copy images to filesys
# for s3resolver:
# - avoids latency when requesting image for the first time and loris has to
#   download the image from s3 to local filesys (then process the requested
#   iiif params for region, size, rotation, format)
- hosts: '{{ target_hosts | default("tag_service_loris", true) }}'
  remote_user: "{{ my_remote_user }}"
  become: yes
  become_user: root
  vars:
      project_name: '{{ hostvars[inventory_hostname].ec2_tag_project | mandatory}}'
      service_role: '{{ hostvars[inventory_hostname].ec2_tag_service | mandatory}}'  # this should be "loris"...
      cluster_env: '{{ (hostvars[inventory_hostname].ec2_tag_cluster == "prod")| ternary("prod", "devo") }}'
      cloudwatch_namespace: '{{ cloudwatch_namespace_prefix }}/{{ project_name }}'
      cronjob_scripts_dir: '/usr/local/bin'
  vars_files:
      - vars/common_vars.yml
      - vars/loris_vars.yml

  tasks:
      # install script for images sync, if images instance
      - import_tasks: roles/hx.loris/tasks/setup_s3_sync_images.yml
        vars:
            s3_sync_bucket_name: '{{ loris_resolver.fs.download_source.from_s3.bucket }}'
            s3_sync_prefix: '{{ loris_resolver.fs.download_source.from_s3.key_prefix}}'
            target_s3_sync_dir: '{{ service_images_dir }}'
        when:
          #ec2_tag_cluster == 'prod' and
          (loris_resolver is defined) and
          ('fs' in loris_resolver) and
          ('download_source' in loris_resolver.fs) and
          ('from_s3' in loris_resolver.fs.download_source)

      - name: run initial s3 sync for images
        become: yes
        become_user: '{{ service_user }}'
        shell: >
            /usr/bin/aws s3 sync
            "s3://{{ loris_resolver.fs.download_source.from_s3.bucket }}/{{ loris_resolver.fs.download_source.from_s3.key_prefix}}"
            "{{ service_images_dir }}"
            2>&1 | logger -t "[s3 sync INITIAL]"
        when:
          #ec2_tag_cluster == 'prod' and
          (loris_resolver is defined) and
          ('fs' in loris_resolver) and
          ('download_source' in loris_resolver.fs) and
          ('from_s3' in loris_resolver.fs.download_source)

      # download loris cache of processed tile images; this is optional
      - name: run initial s3 sync for loris cache
        become: yes
        become_user: '{{ service_user }}'
        shell: >
            /usr/bin/aws s3 sync
            "s3://{{ loris_resolver.fs.download_source.from_s3.bucket }}/loris_resolver.fs.download_source.from_s3.cache_key_prefix"
            "{{ service_cache_dir }}"
            2>&1 | logger -t "[s3 sync INITIAL]"
        when:
          ec2_tag_cluster == 'prod' and
          (loris_resolver is defined) and
          ('fs' in loris_resolver) and
          ('download_source' in loris_resolver.fs) and
          ('from_s3' in loris_resolver.fs.download_source) and
          ('cache_key_prefix' in loris_resolver.fs.download_source.from_s3)




