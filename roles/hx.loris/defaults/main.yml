---
#
# defaults for loris deployment, usually good for vagrant
#

service_git_repo: 'https://github.com/loris-imageserver/loris.git'
service_git_version: 'development'  # head of development branch

service_name: "loris"
service_user: '{{ service_name }}'
service_group: '{{ service_name }}'


# either configure loris with a FSResolver (filesys) or S3Resolver (s3)
#
# loris_s3bucket_map maps an url prefix to a s3bucket and optional key prefix
# to build the s3 object id for a requested image. For the example below, the
# request for http://loris.org/my_url_prefix/image.jpg/full/128,/0/default.jpg
# will map to s3 object s3://my-s3-bucketname/loris/images/image.jpg
#
# hxloris s3resolver supports multiple s3buckets
# for details, see https://github.com/nmaekawa/hxloris
loris_s3resolver:
  loris_s3bucket_map:
    my_url_prefix:
      bucket: 'my-s3-bucketname'
      key_prefix: 'loris/images'

# if both S3 and FS resolvers configured, S3Resolver wins. So to configure
# FSResolver, assign an empty dict to variable `loris_s3resolver`.
#
# to pre-populate the image source dir, playbooks can copy images from a local
# tar.gz or s3sync from a s3 bucket. Below configure one or the other; if both
# configured, tar.gz wins!
#
# for the example below, when configuring an s3 bucket as image source, the s3
# sync will download from s3://my-s3-bucketname/loris/images/*
#
loris_fsresolver:
  target_s3_sync_dir: '{{ service_images_dir }}'

  local_image_sample_path_tar_gz: '/var/tmp/image_sample.tar.gz'

  s3_sync_bucket_name: 'my-s3-bucketname'
  s3_sync_prefix: 'loris/images'


rootdir: '/opt'
service_rootdir: '{{ rootdir }}/{{ service_name }}'
service_venv_dir: "{{ service_rootdir }}/venv"
# service logs go to syslog
service_log_level: "DEBUG"  # 'DEBUG'|'INFO'|'WARNING'|'ERROR'|'CRITICAL'

service_install_dir: '{{ service_rootdir }}/{{ service_name }}'
service_static_dir: '{{ service_rootdir }}/www'
service_config_dir: '{{ service_rootdir }}/conf'
service_config_path: '{{ service_config_dir }}/{{ service_name }}.conf'
service_bin_dir: '{{ service_rootdir }}/bin'
service_data_dir: '{{ service_rootdir }}/data'
service_tmp_dir: '{{ service_data_dir }}/tmp'
service_cache_dir: '{{ service_data_dir }}/cache'
service_images_dir: '{{ service_data_dir }}/images'

# how gunicorn exposes access to loris-hx
service_gunicorn_port: '5088'
service_gunicorn_host: 'localhost'
# workers silent for this many secs are killed and restarted
# must be the same as nginx reverse proxy 'proxy_read_timeout'
gunicorn_timeout_seconds: 300


# easier to create dirs with this dict
service_dirs_to_create:
    - '{{ service_rootdir }}'
    - '{{ service_bin_dir }}'
    - '{{ service_static_dir }}'
    - '{{ service_config_dir }}'
    - '{{ service_data_dir }}'
    - '{{ service_tmp_dir }}'
    - '{{ service_cache_dir }}'
    - '{{ service_images_dir }}'


# for nmaekawa.apt
apt_required_packages:
    - 'python3-pip'
    - 'python3-dev'
    - 'python3-setuptools'
    - 'libjpeg-turbo8-dev'
    - 'libfreetype6-dev'
    - 'zlib1g-dev'
    - 'liblcms2-dev'
    - 'liblcms2-utils'
    - 'libtiff5-dev'
    - 'libwebp-dev'
    - 'supervisor'


enable_ssl: False
webserver_dns: 'loris.vm'


